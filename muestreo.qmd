---
title: "muestreo"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(sampling)
library(survey)
library(knitr)
```


```{r}
df = read_csv("Montevideo GR5.csv")
```

## Parte 1

```{r}
N = nrow(df)
z_star = 1.96  
sigma = 0.5
moe = 0.03
deff = 1.5

n0 <- (z_star * sigma / moe)^2
n1 <- n0 / (1 + (n0 - 1) / N)
neff <- n1 * deff
print(round(neff))
```

## Parte 2

```{r}
estratos = df %>% group_by(estrato) %>% summarise(N=n(),
                                               sd_ing_hog=sd(ingreso_hog))
```

```{r}
estratos = estratos %>% mutate(n_prop=round(neff*N/sum(N)),
                       n_opt=round(neff*N*sd_ing_hog/sum(N*sd_ing_hog)))
estratos %>% kable()
```

## Parte 3

```{r}
set.seed(5)
muestra_final = list()
for(i in 1:nrow(estratos)) {
  estrato_i = estratos$estrato[i]
  n_opt_i = estratos$n_opt[i]
  
  df_estrato = df %>% filter(estrato == estrato_i)
  
  UPMs = unique(df_estrato$manzana)
  m = round(n_opt_i / 10)  
  
  s_upm = sampling::cluster(data=df_estrato,
                            clustername='manzana',
                            size=m,
                            method='srswor')
  s_upm_data = getdata(df_estrato, s_upm) %>% 
    rename(prob_upm=Prob)
  
  s_usm_data_list = list()
  
  for(upm in unique(s_upm_data$manzana)) {
    df_upm = s_upm_data %>% filter(manzana == upm)
    
    s_usm = sampling::strata(data=df_upm,
                   stratanames='manzana',
                   size=min(10, nrow(df_upm)),  
                   method='srswor')
    
    s_usm_data = getdata(df_upm, s_usm) %>% 
      rename(prob_usm=Prob)
    
    s_usm_data_list[[upm]] = s_usm_data
  }
  
  s_usm_data = bind_rows(s_usm_data_list)
  
  s_usm_data = s_usm_data %>% mutate(prob_total=prob_upm * prob_usm,
                                     w=1 / prob_total)
  
  muestra_final[[i]] = s_usm_data
}
s = bind_rows(muestra_final)

```


## Parte 4
```{r}
s= s %>% mutate(prob_total=prob_upm*prob_usm,
                w=1/prob_total)
```

```{r}
ps1= s %>% svydesign(strata=~ estrato , ids=~manzana+ID,
                     fpc=~prob_upm+prob_usm,
                     weights=~w,
                     data=.)
```

## Ingreso per cápita
```{r}
res <- svymean(~ingreso_hog, ps1)
conf_int <- confint(res)
cv_res <- cv(res)

resultados <- data.frame(
  Estadística = c("Media del ingreso", "Límite inferior del IC", "Límite superior del IC", "Desvio", "Coeficiente de variación"),
  Valor = c(coef(res), conf_int[1], conf_int[2], SE(res), cv_res)
  
)

resultados %>% kable()

```
## Hogares pobres
```{r}
res = svymean(~pobre, ps1)
conf_int = confint(res)
cv_res = cv(res)

resultados = data.frame(
  Estadística = c("Proporción de hogares pobres", "Límite inferior del IC", "Límite superior del IC", "Desvio" ,"Coeficiente de variación"),
  Valor = c(coef(res), conf_int[1], conf_int[2],SE(res) ,  cv_res)
  
)

resultados %>% kable()


```

## Cantidad personas

```{r}
res = svytotal(~cant_personas ,ps1)
conf_int = confint(res)
cv_res = cv(res)

resultados = data.frame(
  Estadística = c("Total de personas", "Límite inferior del IC", "Límite superior del IC", " Desvio" ,  "Coeficiente de variación"),
  Valor = c(coef(res), conf_int[1], conf_int[2],SE(res) ,  cv_res)
  
)
```


## Parte 5 

Hay que buscar que es 



## Parte 6 

```{r}
res = svyratio(~ingreso_hog, ~cant_personas, ps1)

conf_int = confint(res)
cv_res = cv(res)

resultados = data.frame(
  Estadística = c("Ingreso per cápita", "Límite inferior del IC", "Límite superior del IC", "Desvio" , "Coeficiente de variación"),
  Valor = c(coef(res), conf_int[1], conf_int[2], SE(res) , cv_res)
  
)

resultados %>% kable()


```
## Parte 7 

### Jackknife

```{r}
```{r}
jkn=as.svrepdesign(design=ps1,type='JKn')
```


```{r}
svyratio(~ingreso_hog, ~cant_personas, jkn)
```


```{r}
te=svyratio(~ingreso_hog, ~cant_personas, jkn , return.replicates=TRUE)

```

```{r}
tibble(est= te$replicates) %>% ggplot()+ geom_histogram(aes(x=est), bins=20, fill='purple', color='white')+theme_light()
```

### Bootstrap

```{r}
```{r}
boot=as.svrepdesign(design=ps1, type='subbootstrap', replicates=1000)

svyratio(~ingreso_hog, ~cant_personas, boot)
```

```{r}
te=svyratio(~ingreso_hog, ~cant_personas, boot,return.replicates=TRUE)

```

```{r}
tibble(est= te$replicates) %>% ggplot()+ geom_histogram(aes(x=est), bins=20, fill='purple', color='white')+theme_light()
```

```{r}
```


```{r}

```




